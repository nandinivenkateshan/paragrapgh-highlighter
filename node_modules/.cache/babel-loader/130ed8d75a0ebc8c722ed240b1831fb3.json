{"ast":null,"code":"var _jsxFileName = \"/home/almug/work/nandini/coordinates-calculate/src/App.js\";\nimport React from 'react';\n\nfunction App() {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, \"x1\"), React.createElement(\"input\", {\n    type: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"y1\"), React.createElement(\"input\", {\n    type: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, \"x2\"), React.createElement(\"input\", {\n    type: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, \"y2\"), React.createElement(\"input\", {\n    type: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, \"Submit\")), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"To move elements around we should be familiar with coordinates. Most JavaScript methods deal with one of two coordinate systems: Relative to the window \\u2013 similar to position:fixed, calculated from the window top/left edge. we\\u2019ll denote these coordinates as clientX/clientY, the reasoning for such name will become clear later, when we study event properties. Relative to the document \\u2013 similar to position:absolute in the document root, calculated from the document top/left edge. we\\u2019ll denote them pageX/pageY. When the page is scrolled to the very beginning, so that the top/left corner of the window is exactly the document top/left corner, these coordinates equal each other. But after the document shifts, window-relative coordinates of elements change, as elements move across the window, while document-relative coordinates remain the same. On this picture we take a point in the document and demonstrate its coordinates before the scroll (left) and after it (right):\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"To move elements around we should be familiar with coordinates. Most JavaScript methods deal with one of two coordinate systems: Relative to the window \\u2013 similar to position:fixed, calculated from the window top/left edge. we\\u2019ll denote these coordinates as clientX/clientY, the reasoning for such name will become clear later, when we study event properties. Relative to the document \\u2013 similar to position:absolute in the document root, calculated from the document top/left edge. we\\u2019ll denote them pageX/pageY. When the page is scrolled to the very beginning, so that the top/left corner of the window is exactly the document top/left corner, these coordinates equal each other. But after the document shifts, window-relative coordinates of elements change, as elements move across the window, while document-relative coordinates remain the same. On this picture we take a point in the document and demonstrate its coordinates before the scroll (left) and after it (right):\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"To move elements around we should be familiar with coordinates. Most JavaScript methods deal with one of two coordinate systems: Relative to the window \\u2013 similar to position:fixed, calculated from the window top/left edge. we\\u2019ll denote these coordinates as clientX/clientY, the reasoning for such name will become clear later, when we study event properties. Relative to the document \\u2013 similar to position:absolute in the document root, calculated from the document top/left edge. we\\u2019ll denote them pageX/pageY. When the page is scrolled to the very beginning, so that the top/left corner of the window is exactly the document top/left corner, these coordinates equal each other. But after the document shifts, window-relative coordinates of elements change, as elements move across the window, while document-relative coordinates remain the same. On this picture we take a point in the document and demonstrate its coordinates before the scroll (left) and after it (right):\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"To move elements around we should be familiar with coordinates. Most JavaScript methods deal with one of two coordinate systems: Relative to the window \\u2013 similar to position:fixed, calculated from the window top/left edge. we\\u2019ll denote these coordinates as clientX/clientY, the reasoning for such name will become clear later, when we study event properties. Relative to the document \\u2013 similar to position:absolute in the document root, calculated from the document top/left edge. we\\u2019ll denote them pageX/pageY. When the page is scrolled to the very beginning, so that the top/left corner of the window is exactly the document top/left corner, these coordinates equal each other. But after the document shifts, window-relative coordinates of elements change, as elements move across the window, while document-relative coordinates remain the same. On this picture we take a point in the document and demonstrate its coordinates before the scroll (left) and after it (right):\"));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/almug/work/nandini/coordinates-calculate/src/App.js"],"names":["React","App"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,GAAT,GAAe;AACb,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,OAAO,EAAC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EAEE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAHF,EAIE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UALF,EAME;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAPF,EAQE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,EASE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATF,CADF,EAYE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0+BAZF,EAiCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0+BAjCF,EAsDE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0+BAtDF,EA2EE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0+BA3EF,CADF;AAmGD;;AAED,eAAeA,GAAf","sourcesContent":["import React from 'react';\n\nfunction App() {\n  return (\n    <div>\n      <form>\n        <label htmlFor=''>x1</label>\n        <input type='text' />\n        <label>y1</label>\n        <input type='text' />\n        <label>x2</label>\n        <input type='text' />\n        <label>y2</label>\n        <input type='text' />\n        <button type='submit'>Submit</button>\n      </form>\n      <p>\n      To move elements around we should be familiar with coordinates.\n\nMost JavaScript methods deal with one of two coordinate systems:\n\nRelative to the window – similar to position:fixed,\ncalculated from the window top/left edge.\nwe’ll denote these coordinates as clientX/clientY,\nthe reasoning for such name will become clear later, when we study event properties.\nRelative to the document – similar to position:absolute in the document root, \ncalculated from the document top/left edge.\nwe’ll denote them pageX/pageY.\nWhen the page is scrolled to the very beginning, \nso that the top/left corner of the window is exactly the document top/left corner, \nthese coordinates equal each other. But after the document shifts,\n window-relative coordinates of elements change, as elements move across the window, \n while document-relative coordinates remain the same.\n\nOn this picture we take a point in the document and\n demonstrate its coordinates before the scroll (left) and after it (right):\n      </p>\n      <p>\n      To move elements around we should be familiar with coordinates.\n\nMost JavaScript methods deal with one of two coordinate systems:\n\nRelative to the window – similar to position:fixed,\ncalculated from the window top/left edge.\nwe’ll denote these coordinates as clientX/clientY,\nthe reasoning for such name will become clear later, when we study event properties.\nRelative to the document – similar to position:absolute in the document root, \ncalculated from the document top/left edge.\nwe’ll denote them pageX/pageY.\nWhen the page is scrolled to the very beginning, \nso that the top/left corner of the window is exactly the document top/left corner, \nthese coordinates equal each other. But after the document shifts,\n window-relative coordinates of elements change, as elements move across the window, \n while document-relative coordinates remain the same.\n\nOn this picture we take a point in the document and\n demonstrate its coordinates before the scroll (left) and after it (right):\n      </p>\n      <p>\n      To move elements around we should be familiar with coordinates.\n\nMost JavaScript methods deal with one of two coordinate systems:\n\nRelative to the window – similar to position:fixed,\ncalculated from the window top/left edge.\nwe’ll denote these coordinates as clientX/clientY,\nthe reasoning for such name will become clear later, when we study event properties.\nRelative to the document – similar to position:absolute in the document root, \ncalculated from the document top/left edge.\nwe’ll denote them pageX/pageY.\nWhen the page is scrolled to the very beginning, \nso that the top/left corner of the window is exactly the document top/left corner, \nthese coordinates equal each other. But after the document shifts,\n window-relative coordinates of elements change, as elements move across the window, \n while document-relative coordinates remain the same.\n\nOn this picture we take a point in the document and\n demonstrate its coordinates before the scroll (left) and after it (right):\n      </p>\n      <p>\n      To move elements around we should be familiar with coordinates.\n\nMost JavaScript methods deal with one of two coordinate systems:\n\nRelative to the window – similar to position:fixed,\ncalculated from the window top/left edge.\nwe’ll denote these coordinates as clientX/clientY,\nthe reasoning for such name will become clear later, when we study event properties.\nRelative to the document – similar to position:absolute in the document root, \ncalculated from the document top/left edge.\nwe’ll denote them pageX/pageY.\nWhen the page is scrolled to the very beginning, \nso that the top/left corner of the window is exactly the document top/left corner, \nthese coordinates equal each other. But after the document shifts,\n window-relative coordinates of elements change, as elements move across the window, \n while document-relative coordinates remain the same.\n\nOn this picture we take a point in the document and\n demonstrate its coordinates before the scroll (left) and after it (right):\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}