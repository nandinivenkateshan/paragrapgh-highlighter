{"ast":null,"code":"var _jsxFileName = \"/home/almug/work/nandini/coordinates-calculate/src/App.js\";\nimport React, { useState } from 'react';\n\nfunction App() {\n  const [val, setVal] = useState({});\n\n  const handleChange = e => {\n    const value = e.target.value;\n    setVal({\n      e\n    });\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"x1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \"x1\"), React.createElement(\"input\", {\n    type: \"text\",\n    id: \"x1\",\n    name: \"x1\",\n    value: val.x1,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"y1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"y1\"), React.createElement(\"input\", {\n    type: \"text\",\n    id: \"y1\",\n    name: \"y1\",\n    value: val.y1,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"x2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"x2\"), React.createElement(\"input\", {\n    type: \"text\",\n    id: \"x2\",\n    name: \"x2\",\n    value: val.x2,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    htmlFor: \"y2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"y2\"), React.createElement(\"input\", {\n    type: \"text\",\n    id: \"y2\",\n    name: \"y2\",\n    value: val.y2,\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"Submit\")), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"To move elements around we should be familiar with coordinates. Most JavaScript methods deal with one of two coordinate systems: Relative to the window \\u2013 similar to position:fixed, calculated from the window top/left edge. we\\u2019ll denote these coordinates as clientX/clientY, the reasoning for such name will become clear later, when we study event properties. Relative to the document \\u2013 similar to position:absolute in the document root, calculated from the document top/left edge. we\\u2019ll denote them pageX/pageY. When the page is scrolled to the very beginning, so that the top/left corner of the window is exactly the document top/left corner, these coordinates equal each other. But after the document shifts, window-relative coordinates of elements change, as elements move across the window, while document-relative coordinates remain the same. On this picture we take a point in the document and demonstrate its coordinates before the scroll (left) and after it (right):\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"To move elements around we should be familiar with coordinates. Most JavaScript methods deal with one of two coordinate systems: Relative to the window \\u2013 similar to position:fixed, calculated from the window top/left edge. we\\u2019ll denote these coordinates as clientX/clientY, the reasoning for such name will become clear later, when we study event properties. Relative to the document \\u2013 similar to position:absolute in the document root, calculated from the document top/left edge. we\\u2019ll denote them pageX/pageY. When the page is scrolled to the very beginning, so that the top/left corner of the window is exactly the document top/left corner, these coordinates equal each other. But after the document shifts, window-relative coordinates of elements change, as elements move across the window, while document-relative coordinates remain the same. On this picture we take a point in the document and demonstrate its coordinates before the scroll (left) and after it (right):\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, \"To move elements around we should be familiar with coordinates. Most JavaScript methods deal with one of two coordinate systems: Relative to the window \\u2013 similar to position:fixed, calculated from the window top/left edge. we\\u2019ll denote these coordinates as clientX/clientY, the reasoning for such name will become clear later, when we study event properties. Relative to the document \\u2013 similar to position:absolute in the document root, calculated from the document top/left edge. we\\u2019ll denote them pageX/pageY. When the page is scrolled to the very beginning, so that the top/left corner of the window is exactly the document top/left corner, these coordinates equal each other. But after the document shifts, window-relative coordinates of elements change, as elements move across the window, while document-relative coordinates remain the same. On this picture we take a point in the document and demonstrate its coordinates before the scroll (left) and after it (right):\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"To move elements around we should be familiar with coordinates. Most JavaScript methods deal with one of two coordinate systems: Relative to the window \\u2013 similar to position:fixed, calculated from the window top/left edge. we\\u2019ll denote these coordinates as clientX/clientY, the reasoning for such name will become clear later, when we study event properties. Relative to the document \\u2013 similar to position:absolute in the document root, calculated from the document top/left edge. we\\u2019ll denote them pageX/pageY. When the page is scrolled to the very beginning, so that the top/left corner of the window is exactly the document top/left corner, these coordinates equal each other. But after the document shifts, window-relative coordinates of elements change, as elements move across the window, while document-relative coordinates remain the same. On this picture we take a point in the document and demonstrate its coordinates before the scroll (left) and after it (right):\"));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/almug/work/nandini/coordinates-calculate/src/App.js"],"names":["React","useState","App","val","setVal","handleChange","e","value","target","x1","y1","x2","y2"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBH,QAAQ,CAAC,EAAD,CAA9B;;AACA,QAAMI,YAAY,GAAGC,CAAC,IAAI;AACxB,UAAMC,KAAK,GAAGD,CAAC,CAACE,MAAF,CAASD,KAAvB;AACAH,IAAAA,MAAM,CAAC;AACLE,MAAAA;AADK,KAAD,CAAN;AAGD,GALD;;AAMA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,OAAO,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,EAEE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,EAAE,EAAC,IAAtB;AAA2B,IAAA,IAAI,EAAC,IAAhC;AAAqC,IAAA,KAAK,EAAEH,GAAG,CAACM,EAAhD;AAAoD,IAAA,QAAQ,EAAEJ,YAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAIE;AAAO,IAAA,OAAO,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAJF,EAKE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,EAAE,EAAC,IAAtB;AAA4B,IAAA,IAAI,EAAC,IAAjC;AAAsC,IAAA,KAAK,EAAEF,GAAG,CAACO,EAAjD;AAAqD,IAAA,QAAQ,EAAEL,YAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EAOE;AAAO,IAAA,OAAO,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAPF,EAQE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,EAAE,EAAC,IAAtB;AAA4B,IAAA,IAAI,EAAC,IAAjC;AAAsC,IAAA,KAAK,EAAEF,GAAG,CAACQ,EAAjD;AAAqD,IAAA,QAAQ,EAAEN,YAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,EAUE;AAAO,IAAA,OAAO,EAAC,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAVF,EAWE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,EAAE,EAAC,IAAtB;AAA4B,IAAA,IAAI,EAAC,IAAjC;AAAqC,IAAA,KAAK,EAAEF,GAAG,CAACS,EAAhD;AAAoD,IAAA,QAAQ,EAAEP,YAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,EAaE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAbF,CADF,EAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0+BAhBF,EAqCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0+BArCF,EA0DE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0+BA1DF,EA+EE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0+BA/EF,CADF;AAuGD;;AAED,eAAeH,GAAf","sourcesContent":["import React, { useState } from 'react';\n\nfunction App() {\n  const [val, setVal] = useState({})\n  const handleChange = e => {\n    const value = e.target.value\n    setVal({\n      e\n    })\n  }\n  return (\n    <div>\n      <form>\n        <label htmlFor='x1'>x1</label>\n        <input type='text' id='x1' name='x1' value={val.x1} onChange={handleChange} />\n\n        <label htmlFor='y1'>y1</label>\n        <input type='text' id='y1'  name='y1' value={val.y1} onChange={handleChange} />\n        \n        <label htmlFor='x2'>x2</label>\n        <input type='text' id='x2'  name='x2' value={val.x2} onChange={handleChange}/>\n\n        <label htmlFor='y2'>y2</label>\n        <input type='text' id='y2'  name='y2'value={val.y2} onChange={handleChange} />\n\n        <button type='submit'>Submit</button>\n      </form>\n      <p>\n      To move elements around we should be familiar with coordinates.\n\nMost JavaScript methods deal with one of two coordinate systems:\n\nRelative to the window – similar to position:fixed,\ncalculated from the window top/left edge.\nwe’ll denote these coordinates as clientX/clientY,\nthe reasoning for such name will become clear later, when we study event properties.\nRelative to the document – similar to position:absolute in the document root, \ncalculated from the document top/left edge.\nwe’ll denote them pageX/pageY.\nWhen the page is scrolled to the very beginning, \nso that the top/left corner of the window is exactly the document top/left corner, \nthese coordinates equal each other. But after the document shifts,\n window-relative coordinates of elements change, as elements move across the window, \n while document-relative coordinates remain the same.\n\nOn this picture we take a point in the document and\n demonstrate its coordinates before the scroll (left) and after it (right):\n      </p>\n      <p>\n      To move elements around we should be familiar with coordinates.\n\nMost JavaScript methods deal with one of two coordinate systems:\n\nRelative to the window – similar to position:fixed,\ncalculated from the window top/left edge.\nwe’ll denote these coordinates as clientX/clientY,\nthe reasoning for such name will become clear later, when we study event properties.\nRelative to the document – similar to position:absolute in the document root, \ncalculated from the document top/left edge.\nwe’ll denote them pageX/pageY.\nWhen the page is scrolled to the very beginning, \nso that the top/left corner of the window is exactly the document top/left corner, \nthese coordinates equal each other. But after the document shifts,\n window-relative coordinates of elements change, as elements move across the window, \n while document-relative coordinates remain the same.\n\nOn this picture we take a point in the document and\n demonstrate its coordinates before the scroll (left) and after it (right):\n      </p>\n      <p>\n      To move elements around we should be familiar with coordinates.\n\nMost JavaScript methods deal with one of two coordinate systems:\n\nRelative to the window – similar to position:fixed,\ncalculated from the window top/left edge.\nwe’ll denote these coordinates as clientX/clientY,\nthe reasoning for such name will become clear later, when we study event properties.\nRelative to the document – similar to position:absolute in the document root, \ncalculated from the document top/left edge.\nwe’ll denote them pageX/pageY.\nWhen the page is scrolled to the very beginning, \nso that the top/left corner of the window is exactly the document top/left corner, \nthese coordinates equal each other. But after the document shifts,\n window-relative coordinates of elements change, as elements move across the window, \n while document-relative coordinates remain the same.\n\nOn this picture we take a point in the document and\n demonstrate its coordinates before the scroll (left) and after it (right):\n      </p>\n      <p>\n      To move elements around we should be familiar with coordinates.\n\nMost JavaScript methods deal with one of two coordinate systems:\n\nRelative to the window – similar to position:fixed,\ncalculated from the window top/left edge.\nwe’ll denote these coordinates as clientX/clientY,\nthe reasoning for such name will become clear later, when we study event properties.\nRelative to the document – similar to position:absolute in the document root, \ncalculated from the document top/left edge.\nwe’ll denote them pageX/pageY.\nWhen the page is scrolled to the very beginning, \nso that the top/left corner of the window is exactly the document top/left corner, \nthese coordinates equal each other. But after the document shifts,\n window-relative coordinates of elements change, as elements move across the window, \n while document-relative coordinates remain the same.\n\nOn this picture we take a point in the document and\n demonstrate its coordinates before the scroll (left) and after it (right):\n      </p>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}